# T_TApe
1. Install Cinnamon desktop environment on Ubuntu
sudo apt update

sudo apt install cinnamon-desktop-environment

reboot

select cinnamon when you log in

2. Install dependencies
sudo apt update

sudo apt install cmake xorg-dev libglu1-mesa-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev

3. remove from /usr/lib/x86_64-linux-gnu/ libglfw
sudo rm /usr/lib/x86_64-linux-gnu/libglfw*

4. build glfw
git clone https://github.com/glfw/glfw.git

cd glfw

mkdir build

cd build

cmake ..

make

sudo make install


5. Build
mkdir build

cd build

cmake ..

make

6. Run
sudo ./T_TApe


# Info
aimbot

Vertical power: changes final change of vertical angle (angle * power)
Horizontal power: changes final change of horizontal angle (angle * power)

Speed: speed of changing angle with diffrent smoothing will work in difrent way
Max angle change per tick: maximum value to angle change
Range: maximum range to target
Field of view: maximum angle distance to target
Hitbox type: aim position 

Experimental angle smoothing:
Chat GTP suggested aim smoothing (Higly expermental, you might need to change speed and other aimbot settings to see dirrence)
1. Linear smoothing: In linear smoothing, the aimbot's crosshair is moved a percentage of the distance between its current position and the target position. For example, if the aimbot is currently aiming 50 pixels away from the target and has a smoothing factor of 50%, it will aim halfway towards the target, i.e., 25 pixels away.
2. Exponential smoothing: Exponential smoothing involves moving the aimbot's crosshair towards the target using an exponential function. This method results in a smoother movement compared to linear smoothing.
3. S-curve smoothing: S-curve smoothing is similar to exponential smoothing, but the movement curve is shaped like an S. This method results in a smoother movement compared to linear smoothing, but it is slightly more aggressive than exponential smoothing.
4. Bezier smoothing: This method uses a cubic Bezier curve to smoothly interpolate between two points. The curve is defined by four control points, and the angle is smoothly adjusted along the curve as the aim moves from the starting point to the target point.
5. Acceleration smoothing: This method uses an acceleration function to gradually increase or decrease the speed of the aim movement. This creates a more natural and realistic motion, similar to how the human hand moves when aiming.
6. Jerk-limited smoothing: This method limits the rate of change of acceleration (jerk) to create a smooth and consistent motion. This technique is commonly used in robotics and animation to create natural and realistic movements.
